
class Hand {
    constructor(json) {
        json = json === undefined ? {cards: []} : json;
        this.cards = [];
        for(let i = 0; i < json.cards.length; i++) {
            this.cards.push(new Card(json.cards[i]));
        }
        this.isPlayer = json.isPlayer === undefined ? false : json.isPlayer;

        this.inControl = true; //TODO remove this cause is sloppy
    }
    toJSON(){
        let cardsJSON = [];
        for(let i = 0; i < this.cards.length; i++) {
            cardsJSON.push(this.cards[i].toJSON());
        }
        return {
            cards:cardsJSON
        };
    }
    //mose events
    mouseMoved() {
        this.loopCardsWithCallBack(function (card,xi,yi) {
            let rect = card.getHandRect(xi,yi);
            card.mouseIsOver = collidePointRect(mouseX,mouseY,rect.x,rect.y,rect.w,rect.h);
        });
    }
    mouseReleased(){
        this.loopCardsWithCallBack(function (card,xi,yi) {
            if(card.mouseIsOver) {
                network.selectCard(card.toJSON());
                console.log('clicky click clack');
            }
        });
    }
    draw() {
        this.loopCardsWithCallBack(function (card,xi,yi) {
            push();
            translate(xi,yi);
            card.handDraw();
            pop();
        });
    }
    loopCardsWithCallBack(f) {
        let xi, yi;
        let step = width / this.cards.length;
        if (this.owner === 0) { //TODO make owner a enum or a bool isPlayer
            xi = defaults.hand.player.initialXi;
            yi = defaults.hand.player.initialYi;
        } else {
            xi = defaults.hand.opp.initialXi;
            yi = defaults.hand.opp.initialYi;
        }
<<<<<<< HEAD
        for (var i = this.cards.length-1; i >= 0; i--) {
            this.cards[i].owner = this.owner;
            this.cards[i].handDraw();

            if (this.cards[i].mouseHit == true && this.cards[i].owner == 0) { // player hand
                this.cards[i].mouseHit = collidePointRect(mouseX,mouseY,xi-this.cards[i].cardWidth/2,yi-this.cards[i].cardHeight,this.cards[i].cardWidth*2, this.cards[i].cardHeight*2, 3);

                if (this.cards[i].isSelected && this.inControl) {
                    
                    console.log(this.cards[i].toJSON());
                    game.duel.cardSelected = this.cards[i]; //pass card to duel object
                    this.cards.splice(i,1);
                    this.inControl = 0;

                } else if (this.cards[i].isSelected && !this.inControl) {
                    
                    console.log(this.cards[i].toJSON());
                    var cardFromDuel = game.duel.cardSelected;
                    cardFromDuel.isSelected = false;
                    game.duel.cardSelected = this.cards[i]; //pass card to duel object
                    this.cards.splice(i,1);
                    this.cards.push(cardFromDuel);

                }

            } else if (this.cards[i].mouseHit == true && this.cards[i].owner == 1) {
                this.cards[i].mouseHit = collidePointRect(mouseX,mouseY,xi-this.cards[i].cardWidth/2,yi,this.cards[i].cardWidth*2, this.cards[i].cardHeight*2, 3);

            } else {
                this.cards[i].mouseHit = collidePointRect(mouseX,mouseY,xi,yi,this.cards[i].cardWidth, this.cards[i].cardHeight, 3);
            }
            translate(step,0);
=======
        for (let i = 0;i<this.cards.length; i++) {
            let card = this.cards[i];
            card.owner = this.owner; //TODO change to is isPlayer I think
            f(card,xi,yi);
>>>>>>> Bill
            xi += step;
        }
    }

}


function generateHnad(owner) {
    console.log('warning using old code in Hand.js');
    "use strict";
    let cih = [];
    var defaultHandSize = 5;
    for(var i = 0; i < defaultHandSize; i++) {
        let n = Math.floor(Math.random() * 18);
        let c = cardList[n];
        if(c === undefined) {console.log(n);}
        c.owner = owner;
        cih.push(new card(c));
    }

}